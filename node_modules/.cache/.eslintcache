[{"/Users/javier/Documents/BudgetFrontend/frontend/src/index.js":"1","/Users/javier/Documents/BudgetFrontend/frontend/src/App.js":"2","/Users/javier/Documents/BudgetFrontend/frontend/src/Pages/StatsPage.js":"3","/Users/javier/Documents/BudgetFrontend/frontend/src/Pages/TransactionPage.js":"4","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/NavbarFixed.js":"5","/Users/javier/Documents/BudgetFrontend/frontend/src/Pages/Home.js":"6","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/AddTransactionButton.js":"7","/Users/javier/Documents/BudgetFrontend/frontend/src/Pages/SignPage.js":"8","/Users/javier/Documents/BudgetFrontend/frontend/src/Context/AuthContext.js":"9","/Users/javier/Documents/BudgetFrontend/frontend/src/utils/PrivateRoute.js":"10","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Goals.js":"11","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Transaction.js":"12","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Cards/DoughnutCard.js":"13","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Cards/BarCard.js":"14","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Cards/MoneyCard.js":"15","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Forms/AddTransacGoal.js":"16","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Forms/SignForm.js":"17","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Modals/AddEditGoalModal.js":"18","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Forms/CreateEditGoalForm.js":"19"},{"size":280,"mtime":1655347219901,"results":"20","hashOfConfig":"21"},{"size":1240,"mtime":1654474170960,"results":"22","hashOfConfig":"21"},{"size":115,"mtime":1654353700265,"results":"23","hashOfConfig":"21"},{"size":2055,"mtime":1658197348699,"results":"24","hashOfConfig":"21"},{"size":4014,"mtime":1654474027710,"results":"25","hashOfConfig":"21"},{"size":6682,"mtime":1659323238523,"results":"26","hashOfConfig":"21"},{"size":234,"mtime":1654475065164,"results":"27","hashOfConfig":"21"},{"size":1839,"mtime":1655344582915,"results":"28","hashOfConfig":"21"},{"size":2736,"mtime":1659322925990,"results":"29","hashOfConfig":"21"},{"size":319,"mtime":1655344599292,"results":"30","hashOfConfig":"21"},{"size":1755,"mtime":1659319052939,"results":"31","hashOfConfig":"21"},{"size":7917,"mtime":1659323154187,"results":"32","hashOfConfig":"21"},{"size":1016,"mtime":1655345234652,"results":"33","hashOfConfig":"21"},{"size":869,"mtime":1655345077058,"results":"34","hashOfConfig":"21"},{"size":4521,"mtime":1659319084717,"results":"35","hashOfConfig":"21"},{"size":10573,"mtime":1659319104085,"results":"36","hashOfConfig":"21"},{"size":4527,"mtime":1654353700264,"results":"37","hashOfConfig":"21"},{"size":2522,"mtime":1655344072785,"results":"38","hashOfConfig":"21"},{"size":7621,"mtime":1659319123034,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"o78unl",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},"/Users/javier/Documents/BudgetFrontend/frontend/src/index.js",[],[],"/Users/javier/Documents/BudgetFrontend/frontend/src/App.js",[],[],"/Users/javier/Documents/BudgetFrontend/frontend/src/Pages/StatsPage.js",[],[],"/Users/javier/Documents/BudgetFrontend/frontend/src/Pages/TransactionPage.js",[],[],"/Users/javier/Documents/BudgetFrontend/frontend/src/Components/NavbarFixed.js",[],[],"/Users/javier/Documents/BudgetFrontend/frontend/src/Pages/Home.js",["105"],[],"/Users/javier/Documents/BudgetFrontend/frontend/src/Components/AddTransactionButton.js",[],[],"/Users/javier/Documents/BudgetFrontend/frontend/src/Pages/SignPage.js",[],[],"/Users/javier/Documents/BudgetFrontend/frontend/src/Context/AuthContext.js",[],[],"/Users/javier/Documents/BudgetFrontend/frontend/src/utils/PrivateRoute.js",[],[],"/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Goals.js",["106","107"],[],"import React, { useEffect, useState, useContext } from \"react\";\nimport MoneyCard from \"./Cards/MoneyCard\";\nimport AddTransacGoal from \"./Forms/AddTransacGoal\";\nimport AuthContext from \"../Context/AuthContext\";\n\nconst Goals = () => {\n  let [goals, setGoals] = useState([]);\n  let { authTokens, logoutUser } = useContext(AuthContext);\n\n  useEffect(() => {\n    getGoals();\n  }, []);\n\n  let getGoals = async () => {\n    let response = await fetch(\"https://budget-app-javi.herokuapp.com/goals/\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + String(authTokens.access),\n      },\n    });\n    let data = await response.json();\n    setGoals(data);\n  };\n\n  return (\n    <div className=\"d-flex w-100\" style={{ backgroundColor: \"\" }}>\n      <div className=\"justify-content-center col-lg-12 col-md-12 col-sm-11 col-xs-11\">\n        <div className=\"my-2 col-lg-12 col-md-12 col-sm-12\">\n          <h3>Goals</h3>\n        </div>\n        <div className=\"my-2 col-lg-12 col-md-12 col-sm-12\">\n          <div className=\"row\">\n            {goals.map((goals, index) => (\n              <div\n                className=\"col-lg-12 col-md-4 col-sm-6 col-xs-12\"\n                key={index}\n              >\n                <MoneyCard\n                  saved={goals.saved}\n                  amount={goals.amount}\n                  title={goals.title}\n                  id={goals.id}\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n        <div\n          className=\"mx-0 mt-2 mb-5 col-lg-12 col-md-11 col-sm-12\"\n          style={{ backgroundColor: \"\" }}\n        >\n          <AddTransacGoal goal={true} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Goals;\n","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Transaction.js",["108","109"],[],"import React, { useEffect, useState, useContext } from \"react\";\nimport { Pagination, Table } from \"react-bootstrap\";\nimport AuthContext from \"../Context/AuthContext\";\n\nconst Transaction = ({ loadPagination }) => {\n  let [transactions, setTransactions] = useState([]);\n  let { authTokens, logoutUser } = useContext(AuthContext);\n\n  useEffect(() => {\n    let getTransactions = async () => {\n      let response = \"\";\n      if (loadPagination) {\n        response = await fetch(\n          \"https://budget-app-javi.herokuapp.com/transactions/\",\n          {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: \"Bearer \" + String(authTokens.access),\n            },\n          }\n        );\n      } else {\n        response = await fetch(\n          \"https://budget-app-javi.herokuapp.com/transactions/home/\",\n          {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Authorization: \"Bearer \" + String(authTokens.access),\n            },\n          }\n        );\n      }\n      let data = await response.json();\n\n      if (response.status === 200) {\n        setTransactions(data[\"serializer\"]);\n        setListToDisplay(transactions);\n      } else if (response.statusText === \"Unauthorized\") {\n        logoutUser();\n      }\n    };\n    getTransactions();\n  }, []);\n\n  /*let getTransactions = async () => {\n    let response = await fetch(\"/transactions/\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + String(authTokens.access),\n      },\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      setTransactions(data[\"serializer\"]);\n    } else if (response.statusText === \"Unauthorized\") {\n      logoutUser();\n    }\n  };*/\n\n  let deleteTransaction = async (id) => {\n    fetch(`https://budget-app-javi.herokuapp.com/transactions/${id}/delete/`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + String(authTokens.access),\n      },\n    });\n    window.location.reload();\n  };\n\n  const [listToDisplay, setListToDisplay] = useState(transactions.slice(0, 10));\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 10;\n  const pagesCount = Math.ceil(transactions.length / itemsPerPage);\n\n  /*for (let number = 1; number <= pagesCount; number++) {\n    item.push(\n      <Pagination.Item\n        onClick={() => onPageNumberClick(pageNumber)}\n        key={number}\n        active={number === active}\n      >\n        {number}\n      </Pagination.Item>\n    );\n  }*/\n\n  const changePage = (number) => {\n    if (currentPage === number) return;\n    setCurrentPage(number);\n    let index = number * 10;\n    setListToDisplay(transactions.slice(index - 10, index - 1));\n  };\n\n  /*const onPageNumberClick = (pageNumber) => {\n    changePage(pageNumber);\n    console.log(pageNumber);\n  };\n  const setLastPageAsCurrent = () => {\n    if (currentPage > pagesCount) {\n      setCurrentPage(pagesCount);\n    }\n  };*/\n\n  const onPreviousPageClick = () => {\n    if (currentPage - 1 > 0) {\n      changePage(currentPage - 1);\n    }\n  };\n\n  const onNextPageClick = () => {\n    if (currentPage + 1 <= pagesCount) {\n      changePage(currentPage + 1);\n    }\n  };\n\n  /*const pageNumbers = [...new Array(pagesCount)].map((_, index) => {\n    const pageNumber = index + 1;\n    const isPageNumberFirst = pageNumber === 1;\n    const isPageNumberLast = pageNumber === pagesCount;\n    const isCurrentPageWithinTwoPageNumbers =\n      Math.abs(pageNumber - currentPage) <= 2;\n\n    if (\n      isPageNumberFirst ||\n      isPageNumberLast ||\n      isCurrentPageWithinTwoPageNumbers\n    ) {\n      isPageNumberOutOfRange = false;\n      return (\n        <Pagination.Item\n          className=\"d-none\"\n          key={pageNumber}\n          onClick={() => onPageNumberClick(pageNumber)}\n          active={pageNumber === currentPage}\n        >\n          {pageNumber}\n        </Pagination.Item>\n      );\n    }\n\n    if (!isPageNumberOutOfRange) {\n      isPageNumberOutOfRange = true;\n      return <Pagination.Ellipsis key={pageNumber} className=\"muted\" />;\n    }\n\n    return null;\n  });*/\n\n  return (\n    <div className=\"justify-content-center w-100\">\n      {/* <ListGroup defaultActiveKey=\"#link1\">\n        <ListGroup.Item\n          className=\"my-2 border-top-0 border-end-0 border-start-0\"\n          variant=\"light\"\n        >\n          <div className=\"d-flex justify-content-between flex-row\">\n            <div>Starbucks</div>\n            <div>Food</div>\n            <div>10/04/2022</div>\n            <div>$12.99</div>\n          </div>\n        </ListGroup.Item>\n        <ListGroup.Item\n          className=\"my-2 border-top-0 border-end-0 border-start-0\"\n          variant=\"light\"\n        >\n          <div className=\"d-flex justify-content-between flex-row\">\n            <div>Universidad</div>\n            <div>Studies</div>\n            <div>01/04/2022</div>\n            <div>$350.00</div>\n          </div>\n        </ListGroup.Item>\n        <ListGroup.Item\n          className=\"my-2 border-top-0 border-end-0 border-start-0\"\n          variant=\"light\"\n        >\n          <div className=\"d-flex justify-content-between flex-row\">\n            <div>Gama</div>\n            <div>Food</div>\n            <div>29/03/2022</div>\n            <div>$0.90</div>\n          </div>\n        </ListGroup.Item>\n      </ListGroup>*/}\n\n      <Table size=\"lg\" responsive className=\"table-hover border-spacing-4\">\n        <thead className=\"my-4\">\n          <tr className=\"my-4\">\n            <th className=\"text_center\" scope=\"col\">\n              Receiver\n            </th>\n            <th scope=\"col\">Category</th>\n            <th scope=\"col\">Amount</th>\n            <th scope=\"col\">Date</th>\n          </tr>\n        </thead>\n        <tbody>\n          {transactions.map((transac, index) => (\n            <tr key={index} className=\"my-4\">\n              <td className=\"col-md-4 text-capitalize\">{transac.receiver}</td>\n              <td className=\"col-md-3 text-capitalize\">{transac.category}</td>\n              {transac.transaction_way === \"O\" ? (\n                <td className=\"col-md-2 text-danger\">${transac.amount}</td>\n              ) : (\n                <td className=\"col-md-2 text-success\">${transac.amount}</td>\n              )}\n              <td className=\"col-md-4\">{transac.date}</td>\n              {transac.category !== \"goal\" ? (\n                <td\n                  className=\"col-md-1\"\n                  onClick={() => deleteTransaction(transac.id)}\n                >\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"16\"\n                    height=\"16\"\n                    fill=\"currentColor\"\n                    className=\"bi bi-trash2\"\n                    viewBox=\"0 0 16 16\"\n                  >\n                    <path d=\"M14 3a.702.702 0 0 1-.037.225l-1.684 10.104A2 2 0 0 1 10.305 15H5.694a2 2 0 0 1-1.973-1.671L2.037 3.225A.703.703 0 0 1 2 3c0-1.105 2.686-2 6-2s6 .895 6 2zM3.215 4.207l1.493 8.957a1 1 0 0 0 .986.836h4.612a1 1 0 0 0 .986-.836l1.493-8.957C11.69 4.689 9.954 5 8 5c-1.954 0-3.69-.311-4.785-.793z\" />\n                  </svg>\n                </td>\n              ) : (\n                <td\n                  className=\"col-md-1\"\n                  onClick={() => deleteTransaction(transac.id)}\n                ></td>\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n      {loadPagination ? (\n        <Pagination>\n          <Pagination.Prev onClick={onPreviousPageClick} />\n          <Pagination.Next onClick={onNextPageClick} />\n          <div className=\"d-flex align-items-center mx-2\">\n            {currentPage}/{pagesCount}\n          </div>\n        </Pagination>\n      ) : (\n        <div></div>\n      )}\n    </div>\n  );\n};\n\nexport default Transaction;\n","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Cards/DoughnutCard.js",["110","111"],[],"import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { Chart as ChartJS } from \"chart.js/auto\";\nimport { Chart, Doughnut } from \"react-chartjs-2\";\n\nconst DoughnutCard = ({ title, data, explanation }) => {\n  return (\n    <div>\n      <Card className=\"rounded-5\">\n        <Card.Body\n          className=\"pb-0 mx-auto\"\n          style={{\n            width: \"80%\",\n          }}\n        >\n          <Card.Text className=\"h4\">\n            {title}\n\n            <Doughnut\n              data={data}\n              options={{\n                plugins: {\n                  title: {\n                    display: true,\n                    text: \"Total expenses by category\",\n                    fontSize: 20,\n                  },\n                  legend: {\n                    display: true,\n                    position: \"right\",\n                  },\n                },\n              }}\n            />\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default DoughnutCard;\n","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Cards/BarCard.js",["112","113"],[],"import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { Chart as ChartJS } from \"chart.js/auto\";\nimport { Chart, Bar } from \"react-chartjs-2\";\n\nconst BarCard = ({ title, data, explanation }) => {\n  return (\n    <div>\n      <Card className=\"w-100 d-flex rounded-5 align-item-center\">\n        <Card.Body className=\"mx-2\" style={{}}>\n          <Card.Text className=\"h4\">{title}</Card.Text>\n          <Bar\n            data={data}\n            options={{\n              plugins: {\n                title: {\n                  display: true,\n                  text: \"\",\n                  fontSize: 20,\n                },\n                legend: {\n                  display: false,\n                  position: \"top\",\n                },\n              },\n            }}\n          />\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default BarCard;\n","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Cards/MoneyCard.js",["114"],[],"import React, { useContext } from \"react\";\nimport { Card, ProgressBar } from \"react-bootstrap\";\nimport AuthContext from \"../../Context/AuthContext\";\n//import AddTransacGoal from \"../Forms/AddTransacGoal\";\nimport AddEditGoalModal from \"../Modals/AddEditGoalModal\";\n\nconst MoneyCard = ({ amount, title, saved, id, red }) => {\n  const completed = (saved * 100) / amount;\n  let { authTokens, logoutUser } = useContext(AuthContext);\n\n  let deleteGoal = async () => {\n    let response = await fetch(\n      `https://budget-app-javi.herokuapp.com/goals/${id}/delete/`,\n      {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + String(authTokens.access),\n        },\n      }\n    );\n    if (response.status === 200) {\n      //history(\"/\");\n      await createTransactionForGoal();\n      window.location.reload();\n    } else if (response.statusText === \"Unauthorized\") {\n      logoutUser();\n    }\n  };\n\n  const createTransactionForGoal = async () => {\n    if (saved == 0) {\n      return;\n    }\n    let newDate = new Date();\n    const offset = newDate.getTimezoneOffset();\n    let date = new Date(newDate.getTime() - offset * 120 * 1000);\n    date = date.toISOString().split(\"T\")[0];\n    let response = await fetch(\n      \"https://budget-app-javi.herokuapp.com/transactions/create/\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + String(authTokens.access),\n        },\n        body: JSON.stringify({\n          amount: saved,\n          category: \"goal\",\n          receiver: title,\n          transaction_way: \"I\",\n          date: date,\n        }),\n      }\n    );\n    if (response.status === 200) {\n      //history(\"/\");\n      //For now i use this because of time but its not a good solution to\n      //update the react view when create new object\n    } else if (response.statusText === \"Unauthorized\") {\n      logoutUser();\n    }\n  };\n\n  return (\n    <div>\n      <Card className=\"rounded-5 my-2\">\n        <Card.Body className=\"mx-1\">\n          {saved ? (\n            <div className=\"w-100 mx-0\">\n              <div className=\"d-flex mb-2 w-100\">\n                <div className=\"col-md-10 col-sm-10 col-lg-10 col-10\">\n                  <Card.Title className=\"text-capitalize\">{title}</Card.Title>\n                </div>\n                <div className=\"col-md-2 col-sm-2 col-lg-2 col-2\">\n                  <div className=\"row\">\n                    <div className=\"px-0 col-md-6 col-sm-6 col-lg-6 col-6 d-flex justify-content-center mx-0 mb-2\">\n                      <svg\n                        style={{ cursor: \"pointer\" }}\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        width=\"16\"\n                        height=\"16\"\n                        fill=\"currentColor\"\n                        className=\"bi bi-trash2 mr-2 my-0\"\n                        onClick={() => deleteGoal()}\n                      >\n                        <path d=\"M14 3a.702.702 0 0 1-.037.225l-1.684 10.104A2 2 0 0 1 10.305 15H5.694a2 2 0 0 1-1.973-1.671L2.037 3.225A.703.703 0 0 1 2 3c0-1.105 2.686-2 6-2s6 .895 6 2zM3.215 4.207l1.493 8.957a1 1 0 0 0 .986.836h4.612a1 1 0 0 0 .986-.836l1.493-8.957C11.69 4.689 9.954 5 8 5c-1.954 0-3.69-.311-4.785-.793z\" />\n                      </svg>\n                    </div>\n                    <div className=\"px-0 col-md-6 col-sm-6 col-lg-6 col-6 d-flex justify-content-center mx-0 mb-2\">\n                      <AddEditGoalModal\n                        id={id}\n                        title={title}\n                        amount={amount}\n                        saved={saved}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <h4>\n                  <span className=\"text-success\">${saved}</span>\n                  <span> / $ {amount}</span>\n                </h4>\n                <ProgressBar variant=\"success\" now={completed} />\n              </div>\n            </div>\n          ) : (\n            <div>\n              <Card.Text className=\"text-capitalize\">{title}</Card.Text>\n              <div>\n                {!red ? (\n                  <h4 className=\"text-success\">${amount}</h4>\n                ) : (\n                  <h4 className=\"text-danger\">${amount}</h4>\n                )}\n              </div>\n            </div>\n          )}\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default MoneyCard;\n","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Forms/AddTransacGoal.js",["115","116"],[],"import React, { useState, useContext } from \"react\";\nimport {\n  Form,\n  Button,\n  Modal,\n  InputGroup,\n  FormControl,\n  OverlayTrigger,\n  Tooltip,\n} from \"react-bootstrap\";\nimport AuthContext from \"../../Context/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport moment from \"moment\";\n\nconst AddTransacGoal = ({ goal }) => {\n  const isGoal = goal;\n  const [show, setShow] = useState(false);\n  let { authTokens, logoutUser } = useContext(AuthContext);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const renderTooltip = (props) => (\n    <Tooltip id=\"button-tooltip\" {...props}>\n      Add Transaction\n    </Tooltip>\n  );\n\n  const [validated, setValidated] = useState(false);\n\n  const createTransaction = async (event) => {\n    let response = await fetch(\n      \"https://budget-app-javi.herokuapp.com/transactions/create/\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + String(authTokens.access),\n        },\n        body: JSON.stringify({\n          amount: event.target.elements.formAmount.value,\n          category: event.target.elements.formCategory.value,\n          date: event.target.elements.formDate.value,\n          receiver: event.target.elements.formReceiver.value,\n          transaction_way: event.target.elements.formWay.value,\n        }),\n      }\n    );\n    if (response.status === 200) {\n      //history(\"/\");\n      window.location.reload();\n    } else if (response.statusText === \"Unauthorized\") {\n      logoutUser();\n    }\n  };\n\n  const createTransactionForGoal = async (event) => {\n    if (event.target.elements.formSaved.value == 0) {\n      return;\n    }\n    let response = await fetch(\n      \"https://budget-app-javi.herokuapp.com/transactions/create/\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + String(authTokens.access),\n        },\n        body: JSON.stringify({\n          amount: event.target.elements.formSaved.value,\n          category: \"goal\",\n          receiver: event.target.elements.formReceiver.value,\n          transaction_way: \"O\",\n          date: event.target.elements.formDate.value,\n        }),\n      }\n    );\n    if (response.status === 200) {\n      //history(\"/\");\n      //For now i use this because of time but its not a good solution to\n      //update the react view when create new object\n      window.location.reload();\n    } else if (response.statusText === \"Unauthorized\") {\n      logoutUser();\n    }\n  };\n\n  const createGoal = async (event) => {\n    let response = await fetch(\n      \"https://budget-app-javi.herokuapp.com/goals/create/\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + String(authTokens.access),\n        },\n        body: JSON.stringify({\n          amount: event.target.elements.formAmount.value,\n          saved: event.target.elements.formSaved.value,\n          title: event.target.elements.formReceiver.value,\n        }),\n      }\n    );\n    if (response.status === 200) {\n      //history(\"/\");\n      await createTransactionForGoal(event);\n      window.location.reload();\n    } else if (response.statusText === \"Unauthorized\") {\n      logoutUser();\n    }\n  };\n\n  const handleSubmit = async (event) => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      if (isGoal) {\n        createGoal(event);\n      } else {\n        createTransaction(event);\n      }\n    }\n    setValidated(true);\n    handleClose();\n  };\n\n  const handleCloseForm = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setValidated(false);\n    handleClose();\n  };\n\n  return (\n    <div className=\"px-0 d-flex justify-content-center mx-0\">\n      <Modal show={show} onHide={handleClose}>\n        {isGoal ? (\n          <Modal.Header closeButton onClick={() => setValidated(false)}>\n            <Modal.Title>Add new goal</Modal.Title>\n          </Modal.Header>\n        ) : (\n          <Modal.Header closeButton onClick={() => setValidated(false)}>\n            <Modal.Title>Add new transaction</Modal.Title>\n          </Modal.Header>\n        )}\n        <Form\n          noValidate\n          validated={validated}\n          onSubmit={(e) => handleSubmit(e)}\n          onReset={(e) => handleCloseForm(e)}\n        >\n          <Modal.Body>\n            <div>\n              <Form.Group className=\"mb-3\" controlId=\"formReceiver\">\n                {isGoal ? (\n                  <Form.Label>Goal Title </Form.Label>\n                ) : (\n                  <Form.Label>Receiver </Form.Label>\n                )}\n                <Form.Control\n                  required\n                  type=\"text\"\n                  placeholder=\"Enter the receiver\"\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  Please enter a receiver.\n                </Form.Control.Feedback>\n                <Form.Text></Form.Text>\n              </Form.Group>\n            </div>\n            <Form.Group className=\"mb-3\" controlId=\"formAmount\">\n              <Form.Label>Amount</Form.Label>\n              <InputGroup className=\"mb-3\">\n                <InputGroup.Text>$</InputGroup.Text>\n                <FormControl\n                  required\n                  type=\"number\"\n                  min=\"0.00\"\n                  max=\"10000.00\"\n                  step=\"0.01\"\n                  placeholder=\"Enter amount\"\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  Please enter a amount.\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n            {isGoal ? (\n              <div>\n                <Form.Group className=\"mb-3\" controlId=\"formSaved\">\n                  <Form.Label>Saved</Form.Label>\n                  <InputGroup className=\"mb-3\">\n                    <InputGroup.Text>$</InputGroup.Text>\n                    <FormControl\n                      required\n                      type=\"number\"\n                      min=\"0.00\"\n                      max=\"10000.00\"\n                      step=\"0.01\"\n                      placeholder=\"Enter amount saved\"\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      Please enter a amount saved.\n                    </Form.Control.Feedback>\n                  </InputGroup>\n                </Form.Group>\n              </div>\n            ) : (\n              <div>\n                <div>\n                  <Form.Group className=\"mb-3\" controlId=\"formCategory\">\n                    <Form.Label>Category </Form.Label>\n                    <Form.Control\n                      required\n                      type=\"name\"\n                      placeholder=\"Enter the category\"\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      Please enter a category.\n                    </Form.Control.Feedback>\n                    <Form.Text></Form.Text>\n                  </Form.Group>\n                </div>\n\n                <div>\n                  <Form.Group className=\"mb-3\" controlId=\"formWay\">\n                    <Form.Label>Transaction Way </Form.Label>\n                    <Form.Control as=\"select\" type=\"name\" required>\n                      <option value=\"I\">In</option>\n                      <option value=\"O\">Out</option>\n                    </Form.Control>\n                    <Form.Control.Feedback type=\"invalid\">\n                      Please enter a way.\n                    </Form.Control.Feedback>\n                  </Form.Group>\n                </div>\n              </div>\n            )}\n            <div>\n              <Form.Group className=\"mb-3\" controlId=\"formDate\">\n                <Form.Label>Date </Form.Label>\n                <Form.Control\n                  required\n                  type=\"date\"\n                  placeholder=\"Enter the date\"\n                  max={moment().format(\"YYYY-MM-DD\")}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  Please choose a date.\n                </Form.Control.Feedback>\n                <Form.Text></Form.Text>\n              </Form.Group>\n            </div>\n          </Modal.Body>\n          <Modal.Footer>\n            <div>\n              <div className=\"d-flex justify-content-center\">\n                <Button size=\"md\" variant=\"primary\" type=\"submit\">\n                  {isGoal ? \"Add Goal\" : \"Add Transaction\"}\n                </Button>\n              </div>\n            </div>\n            <div\n              style={{\n                cursor: \"pointer\",\n              }}\n              className=\"d-flex border-0 justify-content-center fw-bold text-secondary\"\n            >\n              <Button\n                className=\"border-0\"\n                type=\"reset\"\n                variant=\"outline-secondary\"\n              >\n                Go back\n              </Button>\n            </div>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n      {isGoal ? (\n        <div className=\"row mb-5 px-0 col-lg-12 col-md-3 col-sm-5 d-flex justify-content-center\">\n          <Button size=\"lg\" variant=\"outline-info\" onClick={handleShow}>\n            Add Goal\n          </Button>\n        </div>\n      ) : (\n        <div className=\"d-flex\">\n          <div\n            className=\"d-flex fixed-bottom justify-content-center me-4 mb-4\"\n            style={{ width: \"15vw\" }}\n          >\n            <OverlayTrigger\n              placement=\"right\"\n              delay={{ show: 250, hide: 400 }}\n              overlay={renderTooltip}\n            >\n              <Button\n                onClick={handleShow}\n                style={{ borderRadius: \"50%\" }}\n                size=\"md\"\n                variant=\"primary\"\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"28\"\n                  height=\"40\"\n                  fill=\"currentColor\"\n                  className=\"bi bi-plus-lg\"\n                  viewBox=\"0 0 16 16\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    d=\"M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z\"\n                  />\n                </svg>\n              </Button>\n            </OverlayTrigger>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddTransacGoal;\n","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Forms/SignForm.js",[],[],"/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Modals/AddEditGoalModal.js",["117","118","119"],[],"import React, { useState, useContext } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport AuthContext from \"../../Context/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport CreateEditGoalForm from \"../Forms/CreateEditGoalForm\";\n\nconst AddEditGoalModal = ({ creating, id, title, amount, saved }) => {\n  const isCreating = creating;\n  const [show, setShow] = useState(false);\n  //let { authTokens, logoutUser } = useContext(AuthContext);\n  //const history = useNavigate();\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  // const [validated, setValidated] = useState(false);\n\n  return (\n    <div className=\"px-0 d-flex justify-content-center mx-0\">\n      <Modal show={show} onHide={handleClose}>\n        {isCreating ? (\n          <Modal.Header closeButton /*onClick={() => setValidated(false)}*/>\n            <Modal.Title>Add new goal</Modal.Title>\n          </Modal.Header>\n        ) : (\n          <Modal.Header closeButton /*onClick={() => setValidated(false)}*/>\n            <Modal.Title>Edit goal</Modal.Title>\n          </Modal.Header>\n        )}\n\n        <Modal.Body>\n          <CreateEditGoalForm\n            creating={false}\n            title={title}\n            amount={amount}\n            saved={saved}\n            idGoal={id}\n          />\n        </Modal.Body>\n      </Modal>\n      {isCreating ? (\n        <div className=\"row mb-5 px-0 col-lg-12 col-md-3 col-sm-5 d-flex justify-content-center\">\n          <Button size=\"lg\" variant=\"outline-info\" onClick={handleShow}>\n            Add Goal\n          </Button>\n        </div>\n      ) : (\n        <div\n          style={{ cursor: \"pointer\" }}\n          className=\"d-flex justify-content-center\"\n        >\n          <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"16\"\n            height=\"16\"\n            fill=\"currentColor\"\n            className=\"bi bi-pencil ml-2\"\n            viewBox=\"0 0 16 16\"\n            onClick={handleShow}\n          >\n            <path d=\"M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5 13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z\" />\n          </svg>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AddEditGoalModal;\n","/Users/javier/Documents/BudgetFrontend/frontend/src/Components/Forms/CreateEditGoalForm.js",["120"],[],"import React, { useState, useContext } from \"react\";\nimport { Form, Button, InputGroup, FormControl } from \"react-bootstrap\";\nimport AuthContext from \"../../Context/AuthContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport moment from \"moment\";\n\nconst CreateEditGoalForm = ({ creating, title, amount, saved, idGoal }) => {\n  const isCreating = creating;\n  let { authTokens, logoutUser } = useContext(AuthContext);\n\n  const [validated, setValidated] = useState(false);\n\n  const createTransactionForGoal = async (event) => {\n    let amountToSave = event.target.elements.formSaved.value;\n    let transacWay = \"O\";\n    if (!creating) {\n      if (\n        parseFloat(event.target.elements.formSaved.value) > parseFloat(saved)\n      ) {\n        amountToSave = event.target.elements.formSaved.value - saved;\n      } else if (\n        parseFloat(event.target.elements.formSaved.value) < parseFloat(saved)\n      ) {\n        amountToSave = saved - event.target.elements.formSaved.value;\n        transacWay = \"I\";\n      }\n    }\n    let response = await fetch(\n      \"https://budget-app-javi.herokuapp.com/transactions/create/\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + String(authTokens.access),\n        },\n        body: JSON.stringify({\n          amount: amountToSave,\n          category: \"goal\",\n          receiver: title,\n          transaction_way: transacWay,\n          date: event.target.elements.formDate.value,\n        }),\n      }\n    );\n    if (response.statusText === \"Unauthorized\") {\n      logoutUser();\n    }\n    return;\n  };\n\n  const createGoal = async (event) => {\n    let response = await fetch(\n      \"https://budget-app-javi.herokuapp.com/goals/create/\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + String(authTokens.access),\n        },\n        body: JSON.stringify({\n          amount: event.target.elements.formAmount.value,\n          saved: event.target.elements.formSaved.value,\n          title: event.target.elements.formReceiver.value,\n        }),\n      }\n    );\n    if (response.status === 200) {\n      //history(\"/\");\n      await createTransactionForGoal(event);\n    } else if (response.statusText === \"Unauthorized\") {\n      logoutUser();\n    }\n    window.location.reload();\n  };\n\n  const editGoal = async (event) => {\n    if (\n      parseFloat(event.target.elements.formSaved.value) >\n      parseFloat(event.target.elements.formAmount.value)\n    ) {\n      alert(\"Saved can't be greater than amount\");\n      return;\n    }\n    let response = await fetch(\n      `https://budget-app-javi.herokuapp.com/goals/${idGoal}/update/`,\n      {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + String(authTokens.access),\n        },\n        body: JSON.stringify({\n          amount: event.target.elements.formAmount.value,\n          saved: event.target.elements.formSaved.value,\n          title: title,\n        }),\n      }\n    );\n    if (response.status === 200) {\n      //history(\"/\");\n      if (\n        event.target.elements.formSaved.value !== saved ||\n        event.target.elements.formAmount.value !== amount\n      ) {\n        await createTransactionForGoal(event);\n      }\n    } else if (response.statusText === \"Unauthorized\") {\n      logoutUser();\n    }\n    window.location.reload();\n  };\n\n  const handleSubmit = async (event) => {\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n      alert(\"No changes detected\");\n    } else {\n      if (isCreating) {\n        createGoal(event);\n      } else {\n        editGoal(event);\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }\n    setValidated(true);\n    handleCloseForm();\n  };\n\n  const handleCloseForm = (event) => {\n    //event.preventDefault();\n    //event.stopPropagation();\n    setValidated(false);\n  };\n\n  return (\n    <div className=\"w-100\">\n      <Form\n        noValidate\n        validated={validated}\n        onSubmit={(e) => handleSubmit(e)}\n        onReset={(e) => handleCloseForm(e)}\n      >\n        <div>\n          <Form.Group className=\"mb-3\" controlId=\"formReceiver\">\n            {!isCreating ? (\n              <div></div>\n            ) : (\n              <div>\n                <Form.Label>Goal Title </Form.Label>\n                <Form.Control\n                  required\n                  type=\"text\"\n                  placeholder=\"Enter the title\"\n                />\n              </div>\n            )}\n\n            <Form.Control.Feedback type=\"invalid\">\n              Please enter a receiver.\n            </Form.Control.Feedback>\n            <Form.Text></Form.Text>\n          </Form.Group>\n        </div>\n        <Form.Group className=\"mb-3\" controlId=\"formAmount\">\n          <Form.Label>Amount</Form.Label>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Text>$</InputGroup.Text>\n            {!isCreating ? (\n              <FormControl\n                required\n                type=\"number\"\n                min=\"0.00\"\n                max=\"10000.00\"\n                step=\"0.01\"\n                placeholder=\"Enter amount\"\n                defaultValue={amount}\n              />\n            ) : (\n              <FormControl\n                required\n                type=\"number\"\n                min=\"0.00\"\n                max=\"10000.00\"\n                step=\"0.01\"\n                placeholder=\"Enter amount\"\n              />\n            )}\n\n            <Form.Control.Feedback type=\"invalid\">\n              Please enter a amount.\n            </Form.Control.Feedback>\n          </InputGroup>\n        </Form.Group>\n        <div>\n          <Form.Group className=\"mb-3\" controlId=\"formSaved\">\n            <Form.Label>Saved</Form.Label>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Text>$</InputGroup.Text>\n              {!isCreating ? (\n                <FormControl\n                  required\n                  type=\"number\"\n                  min=\"0.00\"\n                  max=\"10000.00\"\n                  step=\"0.01\"\n                  placeholder=\"Enter amount saved\"\n                  defaultValue={saved}\n                />\n              ) : (\n                <FormControl\n                  required\n                  type=\"number\"\n                  min=\"0.00\"\n                  max=\"10000.00\"\n                  step=\"0.01\"\n                  placeholder=\"Enter amount saved\"\n                />\n              )}\n\n              <Form.Control.Feedback type=\"invalid\">\n                Please enter a amount saved.\n              </Form.Control.Feedback>\n            </InputGroup>\n          </Form.Group>\n        </div>\n        <div>\n          <Form.Group className=\"mb-3\" controlId=\"formDate\">\n            <Form.Label>Date </Form.Label>\n            <Form.Control\n              required\n              type=\"date\"\n              max={moment().format(\"YYYY-MM-DD\")}\n              placeholder=\"Enter the date\"\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              Please choose a date.\n            </Form.Control.Feedback>\n            <Form.Text></Form.Text>\n          </Form.Group>\n        </div>\n        <div>\n          <div className=\"d-flex justify-content-center\">\n            <Button size=\"md\" variant=\"primary\" type=\"submit\">\n              {isCreating ? \"Add Goal\" : \"Edit Goal\"}\n            </Button>\n          </div>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nexport default CreateEditGoalForm;\n",{"ruleId":"121","severity":1,"message":"122","line":81,"column":6,"nodeType":"123","endLine":81,"endColumn":8,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":8,"column":21,"nodeType":"127","messageId":"128","endLine":8,"endColumn":31},{"ruleId":"121","severity":1,"message":"129","line":12,"column":6,"nodeType":"123","endLine":12,"endColumn":8,"suggestions":"130"},{"ruleId":"121","severity":1,"message":"131","line":45,"column":6,"nodeType":"123","endLine":45,"endColumn":8,"suggestions":"132"},{"ruleId":"125","severity":1,"message":"133","line":75,"column":10,"nodeType":"127","messageId":"128","endLine":75,"endColumn":23},{"ruleId":"125","severity":1,"message":"134","line":3,"column":19,"nodeType":"127","messageId":"128","endLine":3,"endColumn":26},{"ruleId":"125","severity":1,"message":"135","line":4,"column":10,"nodeType":"127","messageId":"128","endLine":4,"endColumn":15},{"ruleId":"125","severity":1,"message":"134","line":3,"column":19,"nodeType":"127","messageId":"128","endLine":3,"endColumn":26},{"ruleId":"125","severity":1,"message":"135","line":4,"column":10,"nodeType":"127","messageId":"128","endLine":4,"endColumn":15},{"ruleId":"136","severity":1,"message":"137","line":32,"column":15,"nodeType":"138","messageId":"139","endLine":32,"endColumn":17},{"ruleId":"125","severity":1,"message":"140","line":12,"column":10,"nodeType":"127","messageId":"128","endLine":12,"endColumn":21},{"ruleId":"136","severity":1,"message":"137","line":58,"column":47,"nodeType":"138","messageId":"139","endLine":58,"endColumn":49},{"ruleId":"125","severity":1,"message":"141","line":1,"column":27,"nodeType":"127","messageId":"128","endLine":1,"endColumn":37},{"ruleId":"125","severity":1,"message":"142","line":3,"column":8,"nodeType":"127","messageId":"128","endLine":3,"endColumn":19},{"ruleId":"125","severity":1,"message":"140","line":4,"column":10,"nodeType":"127","messageId":"128","endLine":4,"endColumn":21},{"ruleId":"125","severity":1,"message":"140","line":4,"column":10,"nodeType":"127","messageId":"128","endLine":4,"endColumn":21},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'authTokens.access' and 'logoutUser'. Either include them or remove the dependency array.","ArrayExpression",["143"],"no-unused-vars","'logoutUser' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'getGoals'. Either include it or remove the dependency array.",["144"],"React Hook useEffect has missing dependencies: 'authTokens.access', 'loadPagination', 'logoutUser', and 'transactions'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setListToDisplay' needs the current value of 'transactions'.",["145"],"'listToDisplay' is assigned a value but never used.","'ChartJS' is defined but never used.","'Chart' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useNavigate' is defined but never used.","'useContext' is defined but never used.","'AuthContext' is defined but never used.",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},"Update the dependencies array to be: [authTokens.access, logoutUser]",{"range":"152","text":"153"},"Update the dependencies array to be: [getGoals]",{"range":"154","text":"155"},"Update the dependencies array to be: [authTokens.access, loadPagination, logoutUser, transactions]",{"range":"156","text":"157"},[2226,2228],"[authTokens.access, logoutUser]",[375,377],"[getGoals]",[1387,1389],"[authTokens.access, loadPagination, logoutUser, transactions]"]
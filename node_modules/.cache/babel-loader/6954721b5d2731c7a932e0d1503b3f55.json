{"ast":null,"code":"var _jsxFileName = \"/Users/javier/Documents/BudgetApp/budgetapp/frontend/src/Context/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  localStorage.getItem(\"authTokens\");\n  let [authTokens, setAuthTokens] = useState(null);\n  let [user, setUser] = useState(null);\n\n  let loginUser = async e => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: e.target.elements.formBasicName.value,\n        password: e.target.elements.formBasicPassword.value\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n    } else {\n      alert(\"no user found\");\n    }\n  };\n\n  let contextData = {\n    user: user,\n    loginUser: loginUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"zY+G5N+8H7wFCqhkyy+nfU1QpSs=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/javier/Documents/BudgetApp/budgetapp/frontend/src/Context/AuthContext.js"],"names":["createContext","useState","useEffect","jwt_decode","useHistory","AuthContext","AuthProvider","children","localStorage","getItem","authTokens","setAuthTokens","user","setUser","loginUser","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","username","target","elements","formBasicName","value","password","formBasicPassword","data","json","status","access","setItem","alert","contextData"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,WAAW,gBAAGL,aAAa,EAAjC;AAEA,eAAeK,WAAf;AAEA,OAAO,MAAMC,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5CC,EAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB;AAEA,MAAI,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,IAAD,CAA1C;AACA,MAAI,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,IAAD,CAA9B;;AAEA,MAAIa,SAAS,GAAG,MAAOC,CAAP,IAAa;AAC3BA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAD,EAAqC;AAC7DC,MAAAA,MAAM,EAAE,MADqD;AAE7DC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFoD;AAK7DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,QAAQ,EAAET,CAAC,CAACU,MAAF,CAASC,QAAT,CAAkBC,aAAlB,CAAgCC,KADvB;AAEnBC,QAAAA,QAAQ,EAAEd,CAAC,CAACU,MAAF,CAASC,QAAT,CAAkBI,iBAAlB,CAAoCF;AAF3B,OAAf;AALuD,KAArC,CAA1B;AAUA,QAAIG,IAAI,GAAG,MAAMd,QAAQ,CAACe,IAAT,EAAjB;;AACA,QAAIf,QAAQ,CAACgB,MAAT,KAAoB,GAAxB,EAA6B;AAC3BtB,MAAAA,aAAa,CAACoB,IAAD,CAAb;AACAlB,MAAAA,OAAO,CAACV,UAAU,CAAC4B,IAAI,CAACG,MAAN,CAAX,CAAP;AACA1B,MAAAA,YAAY,CAAC2B,OAAb,CAAqB,YAArB,EAAmCb,IAAI,CAACC,SAAL,CAAeQ,IAAf,CAAnC;AACD,KAJD,MAIO;AACLK,MAAAA,KAAK,CAAC,eAAD,CAAL;AACD;AACF,GApBD;;AAsBA,MAAIC,WAAW,GAAG;AAChBzB,IAAAA,IAAI,EAAEA,IADU;AAEhBE,IAAAA,SAAS,EAAEA;AAFK,GAAlB;AAKA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEuB,WAA7B;AAAA,cAA2C9B;AAA3C;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CApCM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { useHistory } from \"react-router-dom\";\n\nconst AuthContext = createContext();\n\nexport default AuthContext;\n\nexport const AuthProvider = ({ children }) => {\n  localStorage.getItem(\"authTokens\");\n\n  let [authTokens, setAuthTokens] = useState(null);\n  let [user, setUser] = useState(null);\n\n  let loginUser = async (e) => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username: e.target.elements.formBasicName.value,\n        password: e.target.elements.formBasicPassword.value,\n      }),\n    });\n    let data = await response.json();\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n    } else {\n      alert(\"no user found\");\n    }\n  };\n\n  let contextData = {\n    user: user,\n    loginUser: loginUser,\n  };\n\n  return (\n    <AuthContext.Provider value={contextData}>{children}</AuthContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}